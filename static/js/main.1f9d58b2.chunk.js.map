{"version":3,"sources":["util/datesUtil.js","api/fetchDataNy.js","api/fetchDataGr.js","components/BookContainer.js","util/stringUtil.js","components/Footer.js","components/Header.js","components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["getTodayDataFormatted","date","Date","getTime","getTimezoneOffset","toISOString","split","getRandomDate","dates","i","getFullYear","push","Math","floor","random","length","endPoint","fiction","nonFiction","key","fetchDataNyYear","category","a","undefined","console","log","url","axios","get","books","data","results","map","primary_isbn10","publisher","description","title","author","book_image","fetchDataNySingle","result","fetchDataGr","isbn","Error","corsProxy","convert","require","xml","options","compact","xml2js","book","GoodreadsResponse","grRating","average_rating","_text","numPages","num_pages","_cdata","reviews","reviews_widget","BookContainer","props","Card","className","Img","src","Body","Title","target","href","Text","dangerouslySetInnerHTML","__html","substring","indexOf","Footer","Header","handler","current","fluid","name","id","onChange","e","value","document","getElementById","selectedIndex","disabled","selected","style","display","Loading","loading","message","fadeIn","color","App","state","bookCategory","handleBookCategory","setState","apiCalls","this","bookNy","bookGr","Container","direction","alignItems","justify","textAlign","Row","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1f9d58b2.chunk.js","sourcesContent":["export const getTodayDataFormatted = () => {\r\n    const date = new Date();\r\n    const dateString = new Date(date.getTime() - (date.getTimezoneOffset() * 60000))\r\n        .toISOString()\r\n        .split(\"T\")[0];\r\n    return dateString\r\n};\r\n\r\n/**\r\n * returns a random date to be used for list of fiction or non fiction ny times books API call\r\n * @returns {string|*}\r\n */\r\nexport const getRandomDate = () => {\r\n    //new Date().getFullYear()\r\n    const dates = [\"2008-06-08\"]\r\n    for(let i=2009;i<=new Date().getFullYear();i++){\r\n        dates.push(i+\"-01-01\")\r\n    }\r\n    const randomPublicationDate = dates[Math.floor(Math.random() * dates.length)]\r\n    //console.log(`getRandomDate() = randomPublicationDate ${randomPublicationDate}`)\r\n    return randomPublicationDate\r\n}","import axios from 'axios';\r\nimport {getTodayDataFormatted} from \"../util/datesUtil\";\r\n\r\nconst endPoint = 'https://api.nytimes.com/svc/books/v3';\r\nconst fiction = (date) => `/lists/${date}/Hardcover fiction.json`\r\nconst nonFiction = (date) => `/lists/${date}/Hardcover nonfiction.json`\r\nconst key = '?api-key=yIY9ATTla1XKYKfDb1cb9pMz4kXKMiJK'\r\n//available publications: https://api.nytimes.com/svc/books/v3/lists/names.json?api-key=yIY9ATTla1XKYKfDb1cb9pMz4kXKMiJK\r\n\r\n/**\r\n *\r\n * @param date of the publication, should be in the format yyyy-mm-dd (getTodayDataFormatted() or getRandomDate() can be used to get it)\r\n * @param category 0 for fiction, 1 for non fiction\r\n * @returns {Promise<[books]>}\r\n */\r\nexport const fetchDataNyYear = async (date, category) => {\r\n    if (date === undefined) {\r\n        date = getTodayDataFormatted();\r\n    }\r\n    console.log(`4 - category fetchdatanyyear`)\r\n    console.log(category)\r\n    console.log(category == 0 ? true : false)\r\n    const url = category == 0 ? endPoint + fiction(date) + key : endPoint + nonFiction(date) + key\r\n    //url = endPoint + fiction(date) + key;\r\n    console.log(\"-url: \" + url + \" category: \" + category)\r\n\r\n    try {\r\n        const {data: {results: {books}}} = await axios.get(url);\r\n        return books.map((i) => {\r\n            // console.log(`fetchdatanyyear`)\r\n            // console.log(i)\r\n            return {\r\n\r\n                primary_isbn10: i.primary_isbn10,\r\n                publisher: i.publisher,\r\n                description: i.description,\r\n                title: i.title,\r\n                author: i.author,\r\n                book_image: i.book_image\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.log(`error fetchDataNy: ${error}`)\r\n\r\n        return error;\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param date of the publication, should be in the format yyyy-mm-dd (getTodayDataFormatted() or getRandomDate() can be used to get it)\r\n * @param category 0 for fiction, 1 for non fiction\r\n * @returns {Promise<books>} single book\r\n */\r\nexport const fetchDataNySingle = async (date, category) => {\r\n    //this.state.books[Math.floor(Math.random() * this.state.books.length)].title\r\n    const result = await fetchDataNyYear(date, category)\r\n\r\n    return result[Math.floor(Math.random() * result.length)]\r\n};\r\n","import axios from 'axios';\r\nimport * as convert from \"xml-js\";\r\n\r\nconst endPoint = \"https://www.goodreads.com/book/isbn/\"\r\nconst key = \"?key=fXXuZUfpuJYz30B262BBg\"\r\nconst corsProxy = \"https://cors-anywhere.herokuapp.com/\"\r\n\r\n/*\r\nvar convert = require('xml-js');\r\nvar xml = require('fs').readFileSync('test.xml', 'utf8');\r\nvar options = {ignoreComment: true, alwaysChildren: true};\r\nvar result = convert.xml2js(xml, options); // or convert.xml2json(xml, options)\r\nconsole.log(result);\r\n */\r\n\r\n//https://www.goodreads.com/book/isbn/0316037915?key=fXXuZUfpuJYz30B262BBg\r\nexport const fetchDataGr = async (isbn) => {\r\n    if (isbn === undefined) {\r\n        return Error(\"No isbn\");\r\n    }\r\n    const url = corsProxy + endPoint + isbn + key\r\n        console.log(`goodreads url ${url}`)\r\n    try {\r\n        const {data} = await axios.get(url);\r\n        const convert = require('xml-js');\r\n        const xml = data\r\n        const options = {compact: true};\r\n        const {GoodreadsResponse:{book}} = convert.xml2js(xml, options);\r\n        const result = {\r\n            grRating:book.average_rating._text,\r\n            numPages:book.num_pages._cdata,\r\n            reviews:book.reviews_widget._cdata,\r\n            url:book.url._cdata\r\n        }\r\n        // console.log(`fetchDataGr`)\r\n        // console.log(book);\r\n        return result;\r\n    } catch (error) {\r\n        console.log(`error fetchDataGr: ${error}`)\r\n        return error;\r\n    }\r\n}","import React from 'react';\r\nimport {clearGoodreadsReview} from \"../util/stringUtil\";\r\nimport {Card} from \"react-bootstrap\";\r\n\r\nconst BookContainer = (props) => {\r\n    return (\r\n\r\n        <Card className={\"w-75 mx-auto card-no-border\"}>\r\n            <Card.Img className={\"card-img-top mx-auto\"} src={props.book.book_image}/>\r\n            <Card.Body>\r\n                <Card.Title><a target=\"_blank\" href={props.book.url}>Title: {props.book.title}</a></Card.Title>\r\n                <Card.Text>\r\n                    Author: {props.book.author}<br/>\r\n                    Rating: {props.book.grRating}<br/>\r\n                    Pages: {props.book.numPages}<br/>\r\n                </Card.Text>\r\n\r\n                <Card.Text>Description: {props.book.description}</Card.Text>\r\n                <Card.Text dangerouslySetInnerHTML={{__html: clearGoodreadsReview(props.book.reviews)}}/>\r\n            </Card.Body>\r\n        </Card>\r\n\r\n        // <div>\r\n        //     <div className={\"coverDiv\"}><img className={\"bookCover\"} src={props.book.book_image}/></div>\r\n        //     <div>Title: {props.book.title}</div>\r\n        //     <div>Author: {props.book.author}</div>\r\n        //     <div>Pages: {props.book.numPages}</div>\r\n        //     <div>Description: {props.book.description}</div>\r\n        //     <div>Rating: {props.book.grRating}</div>\r\n        //     <div>Goodreads Url: <a href={props.book.url}>{props.book.url}</a></div>\r\n        //     <div dangerouslySetInnerHTML={{__html: clearGoodreadsReview(props.book.reviews)}}/>\r\n        // </div>\r\n    );\r\n};\r\n\r\nexport default BookContainer;\r\n","import React from \"react\";\r\n\r\nexport const clearGoodreadsReview = (reviews) => {\r\n    return reviews.substring(reviews.indexOf('<iframe'))\r\n}\r\n\r\nexport const stringToHtml = (theString) => {\r\n    return <div dangerouslySetInnerHTML={{__html: theString}}/>\r\n}","import React from 'react';\r\n\r\nconst nytlogo = 'https://developer.nytimes.com/files/poweredby_nytimes_30b.png?v=1583354208352';\r\nconst nyturl = 'https://developer.nytimes.com/'\r\nconst grLogo = 'http://d.gr-assets.com/misc/1454549125-1454549125_goodreads_misc.png';\r\nconst grUrl = 'https://www.goodreads.com/api'\r\n\r\nconst Footer = (props) => {\r\n    return (\r\n        <footer className=\"text-center p-1 m-0 bg-footer\">\r\n            <h6 className=\"p-0 m-0\">\r\n                Data provided by:&nbsp;\r\n                <a href={nyturl}><img src={nytlogo}/></a>\r\n                <a href={grUrl}><img src={grLogo}/></a>&nbsp;\r\n                | An open source created by: <a href=\"https://github.com/sylleryum\">https://github.com/sylleryum</a></h6>\r\n\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport {Jumbotron} from \"react-bootstrap\";\r\n\r\nconst Header = ({handler, current}) => {\r\n    return (\r\n        <div fluid className={\"mx-auto header\"}>\r\n            <h3>I want a\r\n            <select\r\n                name={\"seBooks\"}\r\n                id={\"seBooks\"}\r\n                className={\"rounded-lg border-0\"}\r\n                onChange={(e)=> {\r\n                    handler(e.target.value)\r\n                    document.getElementById(\"seBooks\").selectedIndex = 0\r\n                }}>\r\n                <option value={999} disabled selected style={{display:\"none\"}}>\r\n                    {current=0?\"Fiction\":\"Non-fiction\"}\r\n                </option>\r\n                <option value={0}>Fiction</option>\r\n                <option value={1}>Non-Fiction</option>\r\n            </select>\r\n            Best-selling book\r\n            </h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react'\r\n\r\nimport Spinner from 'react-spinkit'\r\n\r\nconst Loading = ({ loading, message }) => {\r\n    return loading ? (\r\n        <div className='overlay-content'>\r\n            <div className='wrapper'>\r\n                <Spinner\r\n                    name='ball-scale-ripple'\r\n                    fadeIn='none'\r\n                    color='white'\r\n                />\r\n                <span className='message'>\r\n                    {message}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    ) : null\r\n}\r\n\r\nexport default Loading","import React, {Fragment} from 'react';\nimport './App.css';\nimport {fetchDataNySingle} from \"./api/fetchDataNy\";\nimport {getRandomDate} from \"./util/datesUtil\";\nimport {fetchDataGr} from \"./api/fetchDataGr\";\nimport BookContainer from \"./components/BookContainer\";\nimport Footer from \"./components/Footer\";\nimport {clearGoodreadsReview} from \"./util/stringUtil\";\nimport Header from \"./components/Header\";\nimport Loading from \"./components/Loading\";\nimport Container from \"react-bootstrap/Container\";\nimport {Row} from \"react-bootstrap\";\n\nclass App extends React.Component {\n    state = {\n        loading: true,\n        //0= fiction, 1=non fiction\n        bookCategory: Math.floor(Math.random() * 2),\n        book: {\n            author: \"\",\n            book_image: \"\",\n            description: \"\",\n            grRating: \"\",\n            numPages: \"\",\n            primary_isbn10: \"\",\n            publisher: \"\",\n            reviews: \"\",\n            title: \"\",\n            url: \"\"\n        }\n    }\n\n    async componentDidMount() {\n        await this.apiCalls();\n        console.log(\"current state\")\n        console.log(this.state)\n        //await fetchDataGr(\"0316037915\")\n    }\n\n    async apiCalls() {\n        console.log(`3 - state category?`)\n        console.log(this.state.bookCategory)\n        const bookNy = await fetchDataNySingle(getRandomDate(), this.state.bookCategory)\n        const bookGr = await fetchDataGr(bookNy.primary_isbn10)\n        this.setState({\n            loading: false,\n            book: {\n                ...bookNy,\n                ...bookGr\n            }\n        })\n    }\n\n    handleBookCategory = async (category) => {\n        console.log(`1 - handler`)\n        console.log(category)\n        //this.state.bookCategory = category\n        this.setState({\n            bookCategory: category,\n            loading: true\n        }, () => {\n            console.log(\"2 - current state inside handler\")\n            console.log(this.state)\n            this.apiCalls()\n        })\n        //this.state.loading = true\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <Container\n                    className={\"rounded\"}\n                    id={\"mainContainer\"}\n                    direction=\"column\"\n                    alignItems=\"center\"\n                    justify=\"center\"\n                    style={{\n                        // maxHeight: '100vh',\n                        textAlign: 'center',\n                    }}>\n                    <Loading loading={this.state.loading} message={\"Getting your book...\"}/>\n                    <Row>\n                        <Header handler={this.handleBookCategory} current={this.state.bookCategory}/>\n                    </Row>\n                    <Row>\n                        <BookContainer book={this.state.book}/>\n                    </Row>\n\n                </Container>\n                <Footer/>\n            </Fragment>\n        );\n\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}