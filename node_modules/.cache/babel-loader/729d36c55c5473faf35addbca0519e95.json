{"ast":null,"code":"import axios from 'axios';\nimport * as convert from \"xml-js\";\nconst endPoint = \"https://www.goodreads.com/book/isbn/\";\nconst key = \"?key=fXXuZUfpuJYz30B262BBg\";\nconst corsProxy = \"https://thingproxy.freeboard.io/fetch/\";\n/*\r\nvar convert = require('xml-js');\r\nvar xml = require('fs').readFileSync('test.xml', 'utf8');\r\nvar options = {ignoreComment: true, alwaysChildren: true};\r\nvar result = convert.xml2js(xml, options); // or convert.xml2json(xml, options)\r\nconsole.log(result);\r\n */\n//https://www.goodreads.com/book/isbn/0316037915?key=fXXuZUfpuJYz30B262BBg\n\nexport const fetchDataGr = async isbn => {\n  if (isbn === undefined) {\n    return Error(\"No isbn\");\n  }\n\n  const url = corsProxy + endPoint + isbn + key;\n\n  try {\n    const {\n      data\n    } = await axios.get(url);\n\n    const convert = require('xml-js');\n\n    const xml = data;\n    const options = {\n      compact: true\n    };\n    const {\n      GoodreadsResponse: {\n        book\n      }\n    } = convert.xml2js(xml, options);\n    const result = {\n      grRating: book.average_rating._text,\n      numPages: book.num_pages._cdata,\n      reviews: book.revies_widget._cdata\n    }; //{data: {results: {books}}}\n\n    console.log(result);\n    console.log(`goodreads`); //console.log(data)\n    //const test = convert.xml2json(data.data, {compact: true, spaces: 4});\n    //console.log(data)\n  } catch (error) {\n    console.log(`error ${error}`);\n    return error;\n  }\n};","map":{"version":3,"sources":["c:/eclipse/react/book-suggestion/src/api/fetchDataGr.js"],"names":["axios","convert","endPoint","key","corsProxy","fetchDataGr","isbn","undefined","Error","url","data","get","require","xml","options","compact","GoodreadsResponse","book","xml2js","result","grRating","average_rating","_text","numPages","num_pages","_cdata","reviews","revies_widget","console","log","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,QAAzB;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;AACA,MAAMC,GAAG,GAAG,4BAAZ;AACA,MAAMC,SAAS,GAAG,wCAAlB;AAEA;;;;;;;AAQA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,IAAP,IAAgB;AACvC,MAAIA,IAAI,KAAKC,SAAb,EAAwB;AACpB,WAAOC,KAAK,CAAC,SAAD,CAAZ;AACH;;AACD,QAAMC,GAAG,GAAGL,SAAS,GAAGF,QAAZ,GAAuBI,IAAvB,GAA8BH,GAA1C;;AACA,MAAI;AACA,UAAM;AAACO,MAAAA;AAAD,QAAS,MAAMV,KAAK,CAACW,GAAN,CAAUF,GAAV,CAArB;;AACA,UAAMR,OAAO,GAAGW,OAAO,CAAC,QAAD,CAAvB;;AACA,UAAMC,GAAG,GAAGH,IAAZ;AACA,UAAMI,OAAO,GAAG;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAhB;AACA,UAAM;AAACC,MAAAA,iBAAiB,EAAC;AAACC,QAAAA;AAAD;AAAnB,QAA6BhB,OAAO,CAACiB,MAAR,CAAeL,GAAf,EAAoBC,OAApB,CAAnC;AACA,UAAMK,MAAM,GAAG;AACXC,MAAAA,QAAQ,EAACH,IAAI,CAACI,cAAL,CAAoBC,KADlB;AAEXC,MAAAA,QAAQ,EAACN,IAAI,CAACO,SAAL,CAAeC,MAFb;AAGXC,MAAAA,OAAO,EAACT,IAAI,CAACU,aAAL,CAAmBF;AAHhB,KAAf,CANA,CAWA;;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AAEAS,IAAAA,OAAO,CAACC,GAAR,CAAa,WAAb,EAdA,CAeA;AACA;AACA;AACH,GAlBD,CAkBE,OAAOC,KAAP,EAAc;AACZF,IAAAA,OAAO,CAACC,GAAR,CAAa,SAAQC,KAAM,EAA3B;AACA,WAAOA,KAAP;AACH;AACJ,CA3BM","sourcesContent":["import axios from 'axios';\r\nimport * as convert from \"xml-js\";\r\n\r\nconst endPoint = \"https://www.goodreads.com/book/isbn/\"\r\nconst key = \"?key=fXXuZUfpuJYz30B262BBg\"\r\nconst corsProxy = \"https://thingproxy.freeboard.io/fetch/\"\r\n\r\n/*\r\nvar convert = require('xml-js');\r\nvar xml = require('fs').readFileSync('test.xml', 'utf8');\r\nvar options = {ignoreComment: true, alwaysChildren: true};\r\nvar result = convert.xml2js(xml, options); // or convert.xml2json(xml, options)\r\nconsole.log(result);\r\n */\r\n\r\n//https://www.goodreads.com/book/isbn/0316037915?key=fXXuZUfpuJYz30B262BBg\r\nexport const fetchDataGr = async (isbn) => {\r\n    if (isbn === undefined) {\r\n        return Error(\"No isbn\");\r\n    }\r\n    const url = corsProxy + endPoint + isbn + key\r\n    try {\r\n        const {data} = await axios.get(url);\r\n        const convert = require('xml-js');\r\n        const xml = data\r\n        const options = {compact: true};\r\n        const {GoodreadsResponse:{book}} = convert.xml2js(xml, options);\r\n        const result = {\r\n            grRating:book.average_rating._text,\r\n            numPages:book.num_pages._cdata,\r\n            reviews:book.revies_widget._cdata\r\n        }\r\n        //{data: {results: {books}}}\r\n        console.log(result);\r\n\r\n        console.log(`goodreads`)\r\n        //console.log(data)\r\n        //const test = convert.xml2json(data.data, {compact: true, spaces: 4});\r\n        //console.log(data)\r\n    } catch (error) {\r\n        console.log(`error ${error}`)\r\n        return error;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}