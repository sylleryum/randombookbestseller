{"ast":null,"code":"import axios from 'axios';\nimport { getTodayDataFormatted } from \"../util/datesUtil\";\nconst endPoint = 'https://api.nytimes.com/svc/books/v3';\n\nconst fiction = date => `/lists/${date}/Hardcover fiction.json`;\n\nconst nonFiction = date => `/lists/${date}/Hardcover nonfiction.json`;\n\nconst key = '?api-key=yIY9ATTla1XKYKfDb1cb9pMz4kXKMiJK'; //available publications: https://api.nytimes.com/svc/books/v3/lists/names.json?api-key=yIY9ATTla1XKYKfDb1cb9pMz4kXKMiJK\n\n/**\r\n *\r\n * @param date of the publication, should be in the format yyyy-mm-dd (getTodayDataFormatted() or getRandomDate() can be used to get it)\r\n * @param category 0 for fiction, 1 for non fiction\r\n * @returns {Promise<*>}\r\n */\n\nconst fetchDataNy = async (date, category) => {\n  if (date === undefined) {\n    date = getTodayDataFormatted();\n  }\n\n  const url = category === 0 ? endPoint + fiction(date) + key : endPoint + nonFiction(date) + key; //url = endPoint + fiction(date) + key;\n\n  console.log(\"url: \" + url);\n\n  try {\n    const {\n      data: {\n        results: {\n          books\n        }\n      }\n    } = await axios.get(url); //console.log(books)\n\n    return books;\n  } catch (error) {\n    console.log(`error ${error}`);\n    return error;\n  }\n};\n\nexport default fetchDataNy;","map":{"version":3,"sources":["c:/eclipse/react/book-suggestion/src/api/fetchDataNy.js"],"names":["axios","getTodayDataFormatted","endPoint","fiction","date","nonFiction","key","fetchDataNy","category","undefined","url","console","log","data","results","books","get","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,qBAAR,QAAoC,mBAApC;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AACA,MAAMC,OAAO,GAAIC,IAAD,IAAW,UAASA,IAAK,yBAAzC;;AACA,MAAMC,UAAU,GAAID,IAAD,IAAW,UAASA,IAAK,4BAA5C;;AACA,MAAME,GAAG,GAAG,2CAAZ,C,CACA;;AAEA;;;;;;;AAMA,MAAMC,WAAW,GAAG,OAAOH,IAAP,EAAaI,QAAb,KAA0B;AAC1C,MAAIJ,IAAI,KAAKK,SAAb,EAAwB;AACpBL,IAAAA,IAAI,GAAGH,qBAAqB,EAA5B;AACH;;AACD,QAAMS,GAAG,GAAIF,QAAQ,KAAK,CAAb,GAAiBN,QAAQ,GAAGC,OAAO,CAACC,IAAD,CAAlB,GAA2BE,GAA5C,GAAkDJ,QAAQ,GAAGG,UAAU,CAACD,IAAD,CAArB,GAA8BE,GAA7F,CAJ0C,CAK1C;;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAUF,GAAtB;;AACA,MAAI;AACA,UAAM;AAACG,MAAAA,IAAI,EAAE;AAACC,QAAAA,OAAO,EAAE;AAACC,UAAAA;AAAD;AAAV;AAAP,QAA6B,MAAMf,KAAK,CAACgB,GAAN,CAAUN,GAAV,CAAzC,CADA,CAEA;;AACA,WAAOK,KAAP;AACH,GAJD,CAIE,OAAOE,KAAP,EAAc;AACZN,IAAAA,OAAO,CAACC,GAAR,CAAa,SAAQK,KAAM,EAA3B;AAEA,WAAOA,KAAP;AACH;AACJ,CAhBD;;AAkBA,eAAeV,WAAf","sourcesContent":["import axios from 'axios';\r\nimport {getTodayDataFormatted} from \"../util/datesUtil\";\r\n\r\nconst endPoint = 'https://api.nytimes.com/svc/books/v3';\r\nconst fiction = (date) => `/lists/${date}/Hardcover fiction.json`\r\nconst nonFiction = (date) => `/lists/${date}/Hardcover nonfiction.json`\r\nconst key = '?api-key=yIY9ATTla1XKYKfDb1cb9pMz4kXKMiJK'\r\n//available publications: https://api.nytimes.com/svc/books/v3/lists/names.json?api-key=yIY9ATTla1XKYKfDb1cb9pMz4kXKMiJK\r\n\r\n/**\r\n *\r\n * @param date of the publication, should be in the format yyyy-mm-dd (getTodayDataFormatted() or getRandomDate() can be used to get it)\r\n * @param category 0 for fiction, 1 for non fiction\r\n * @returns {Promise<*>}\r\n */\r\nconst fetchDataNy = async (date, category) => {\r\n    if (date === undefined) {\r\n        date = getTodayDataFormatted();\r\n    }\r\n    const url =  category === 0 ? endPoint + fiction(date) + key : endPoint + nonFiction(date) + key\r\n    //url = endPoint + fiction(date) + key;\r\n    console.log(\"url: \" + url)\r\n    try {\r\n        const {data: {results: {books}}} = await axios.get(url);\r\n        //console.log(books)\r\n        return books;\r\n    } catch (error) {\r\n        console.log(`error ${error}`)\r\n\r\n        return error;\r\n    }\r\n}\r\n\r\nexport default fetchDataNy\r\n"]},"metadata":{},"sourceType":"module"}