{"ast":null,"code":"import axios from 'axios';\nimport * as convert from \"xml-js\";\nconst endPoint = \"https://www.goodreads.com/book/isbn/\";\nconst key = \"?key=fXXuZUfpuJYz30B262BBg\";\nconst corsProxy = \"https://api.allorigins.win/get?url=\";\n/*\r\nvar convert = require('xml-js');\r\nvar xml = require('fs').readFileSync('test.xml', 'utf8');\r\nvar options = {ignoreComment: true, alwaysChildren: true};\r\nvar result = convert.xml2js(xml, options); // or convert.xml2json(xml, options)\r\nconsole.log(result);\r\n */\n//https://www.goodreads.com/book/isbn/0316037915?key=fXXuZUfpuJYz30B262BBg\n\nexport const fetchDataGr = async isbn => {\n  if (isbn === undefined) {\n    return Error(\"No isbn\");\n  }\n\n  const url = corsProxy + endPoint + isbn + key;\n  console.log(`goodreads url ${url}`);\n\n  try {\n    const {\n      data\n    } = await axios.get(url);\n\n    const convert = require('xml-js');\n\n    const xml = data;\n    const options = {\n      compact: true\n    };\n    const {\n      GoodreadsResponse: {\n        book\n      }\n    } = convert.xml2js(xml);\n    const result = {\n      grRating: book.average_rating._text,\n      numPages: book.num_pages._cdata,\n      reviews: book.reviews_widget._cdata,\n      url: book.url._cdata\n    }; // console.log(`fetchDataGr`)\n    // console.log(book);\n\n    return result;\n  } catch (error) {\n    console.log(`error fetchDataGr: ${error}`);\n    return error;\n  }\n};","map":{"version":3,"sources":["C:/Eclipse/React/book-suggestion/src/api/fetchDataGr.js"],"names":["axios","convert","endPoint","key","corsProxy","fetchDataGr","isbn","undefined","Error","url","console","log","data","get","require","xml","options","compact","GoodreadsResponse","book","xml2js","result","grRating","average_rating","_text","numPages","num_pages","_cdata","reviews","reviews_widget","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,QAAzB;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;AACA,MAAMC,GAAG,GAAG,4BAAZ;AACA,MAAMC,SAAS,GAAG,qCAAlB;AAEA;;;;;;;AAQA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,IAAP,IAAgB;AACvC,MAAIA,IAAI,KAAKC,SAAb,EAAwB;AACpB,WAAOC,KAAK,CAAC,SAAD,CAAZ;AACH;;AACD,QAAMC,GAAG,GAAGL,SAAS,GAAGF,QAAZ,GAAuBI,IAAvB,GAA8BH,GAA1C;AACIO,EAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBF,GAAI,EAAjC;;AACJ,MAAI;AACA,UAAM;AAACG,MAAAA;AAAD,QAAS,MAAMZ,KAAK,CAACa,GAAN,CAAUJ,GAAV,CAArB;;AACA,UAAMR,OAAO,GAAGa,OAAO,CAAC,QAAD,CAAvB;;AACA,UAAMC,GAAG,GAAGH,IAAZ;AACA,UAAMI,OAAO,GAAG;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAhB;AACA,UAAM;AAACC,MAAAA,iBAAiB,EAAC;AAACC,QAAAA;AAAD;AAAnB,QAA6BlB,OAAO,CAACmB,MAAR,CAAeL,GAAf,CAAnC;AACA,UAAMM,MAAM,GAAG;AACXC,MAAAA,QAAQ,EAACH,IAAI,CAACI,cAAL,CAAoBC,KADlB;AAEXC,MAAAA,QAAQ,EAACN,IAAI,CAACO,SAAL,CAAeC,MAFb;AAGXC,MAAAA,OAAO,EAACT,IAAI,CAACU,cAAL,CAAoBF,MAHjB;AAIXlB,MAAAA,GAAG,EAACU,IAAI,CAACV,GAAL,CAASkB;AAJF,KAAf,CANA,CAYA;AACA;;AACA,WAAON,MAAP;AACH,GAfD,CAeE,OAAOS,KAAP,EAAc;AACZpB,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBmB,KAAM,EAAxC;AACA,WAAOA,KAAP;AACH;AACJ,CAzBM","sourcesContent":["import axios from 'axios';\r\nimport * as convert from \"xml-js\";\r\n\r\nconst endPoint = \"https://www.goodreads.com/book/isbn/\"\r\nconst key = \"?key=fXXuZUfpuJYz30B262BBg\"\r\nconst corsProxy = \"https://api.allorigins.win/get?url=\"\r\n\r\n/*\r\nvar convert = require('xml-js');\r\nvar xml = require('fs').readFileSync('test.xml', 'utf8');\r\nvar options = {ignoreComment: true, alwaysChildren: true};\r\nvar result = convert.xml2js(xml, options); // or convert.xml2json(xml, options)\r\nconsole.log(result);\r\n */\r\n\r\n//https://www.goodreads.com/book/isbn/0316037915?key=fXXuZUfpuJYz30B262BBg\r\nexport const fetchDataGr = async (isbn) => {\r\n    if (isbn === undefined) {\r\n        return Error(\"No isbn\");\r\n    }\r\n    const url = corsProxy + endPoint + isbn + key\r\n        console.log(`goodreads url ${url}`)\r\n    try {\r\n        const {data} = await axios.get(url);\r\n        const convert = require('xml-js');\r\n        const xml = data\r\n        const options = {compact: true};\r\n        const {GoodreadsResponse:{book}} = convert.xml2js(xml);\r\n        const result = {\r\n            grRating:book.average_rating._text,\r\n            numPages:book.num_pages._cdata,\r\n            reviews:book.reviews_widget._cdata,\r\n            url:book.url._cdata\r\n        }\r\n        // console.log(`fetchDataGr`)\r\n        // console.log(book);\r\n        return result;\r\n    } catch (error) {\r\n        console.log(`error fetchDataGr: ${error}`)\r\n        return error;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}