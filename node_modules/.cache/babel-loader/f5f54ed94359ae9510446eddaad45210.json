{"ast":null,"code":"import axios from 'axios';\nconst endPoint = 'https://api.nytimes.com/svc/books/v3';\n\nconst fiction = date => `/lists/${date}/Hardcover Nonfiction.json`;\n\nconst key = '?api-key=yIY9ATTla1XKYKfDb1cb9pMz4kXKMiJK'; //documentation: https://gogapidocs.readthedocs.io/en/latest/account.html#games-movies\n\n/**\r\n *\r\n * @returns {today's date formatted as yyyy-mm-dd}\r\n */\n\nconst getTodayDataFormatted = () => {\n  var date = new Date();\n  var dateString = new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0];\n  return dateString;\n};\n/**\r\n *\r\n * @param date date of the publication, should be in the format yyyy-mm-dd (getTodayDataFormatted() returns in this format)\r\n * @returns {Promise<*>}\r\n */\n\n\nconst fetchDataNy = async date => {\n  console.log(date === null);\n  date = getTodayDataFormatted();\n  const url = endPoint + fiction(date) + key;\n  console.log(url);\n\n  try {\n    const {\n      data: {\n        results: {\n          books\n        }\n      }\n    } = await axios.get(url); //console.log(books)\n\n    return books;\n  } catch (error) {\n    console.log(`error ${error}`);\n    return error;\n  }\n};\n\nexport default fetchDataNy;","map":{"version":3,"sources":["c:/eclipse/react/book-suggestion/src/api/fetchDataNy.js"],"names":["axios","endPoint","fiction","date","key","getTodayDataFormatted","Date","dateString","getTime","getTimezoneOffset","toISOString","split","fetchDataNy","console","log","url","data","results","books","get","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AACA,MAAMC,OAAO,GAAIC,IAAD,IAAS,UAASA,IAAK,4BAAvC;;AACA,MAAMC,GAAG,GAAG,2CAAZ,C,CACA;;AAEA;;;;;AAIA,MAAMC,qBAAqB,GAAG,MAAM;AAChC,MAAIF,IAAI,GAAG,IAAIG,IAAJ,EAAX;AACA,MAAIC,UAAU,GAAG,IAAID,IAAJ,CAASH,IAAI,CAACK,OAAL,KAAkBL,IAAI,CAACM,iBAAL,KAA2B,KAAtD,EACZC,WADY,GAEZC,KAFY,CAEN,GAFM,EAED,CAFC,CAAjB;AAGA,SAAOJ,UAAP;AACH,CAND;AAQA;;;;;;;AAKA,MAAMK,WAAW,GAAG,MAAOT,IAAP,IAAgB;AAChCU,EAAAA,OAAO,CAACC,GAAR,CAAYX,IAAI,KAAG,IAAnB;AACAA,EAAAA,IAAI,GAAGE,qBAAqB,EAA5B;AACA,QAAMU,GAAG,GAAGd,QAAQ,GAAGC,OAAO,CAACC,IAAD,CAAlB,GAA2BC,GAAvC;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;;AACA,MAAI;AACA,UAAM;AAACC,MAAAA,IAAI,EAAE;AAACC,QAAAA,OAAO,EAAE;AAACC,UAAAA;AAAD;AAAV;AAAP,QAA6B,MAAMlB,KAAK,CAACmB,GAAN,CAAUJ,GAAV,CAAzC,CADA,CAEA;;AACA,WAAOG,KAAP;AACH,GAJD,CAIE,OAAOE,KAAP,EAAc;AACZP,IAAAA,OAAO,CAACC,GAAR,CAAa,SAAQM,KAAM,EAA3B;AAEA,WAAOA,KAAP;AACH;AACJ,CAdD;;AAgBA,eAAeR,WAAf","sourcesContent":["import axios from 'axios';\r\n\r\nconst endPoint = 'https://api.nytimes.com/svc/books/v3';\r\nconst fiction = (date)=>`/lists/${date}/Hardcover Nonfiction.json`\r\nconst key = '?api-key=yIY9ATTla1XKYKfDb1cb9pMz4kXKMiJK'\r\n//documentation: https://gogapidocs.readthedocs.io/en/latest/account.html#games-movies\r\n\r\n/**\r\n *\r\n * @returns {today's date formatted as yyyy-mm-dd}\r\n */\r\nconst getTodayDataFormatted = () => {\r\n    var date = new Date();\r\n    var dateString = new Date(date.getTime() - (date.getTimezoneOffset() * 60000))\r\n        .toISOString()\r\n        .split(\"T\")[0];\r\n    return dateString\r\n};\r\n\r\n/**\r\n *\r\n * @param date date of the publication, should be in the format yyyy-mm-dd (getTodayDataFormatted() returns in this format)\r\n * @returns {Promise<*>}\r\n */\r\nconst fetchDataNy = async (date) => {\r\n    console.log(date===null)\r\n    date = getTodayDataFormatted();\r\n    const url = endPoint + fiction(date) + key;\r\n    console.log(url)\r\n    try {\r\n        const {data: {results: {books}}} = await axios.get(url);\r\n        //console.log(books)\r\n        return books;\r\n    } catch (error) {\r\n        console.log(`error ${error}`)\r\n\r\n        return error;\r\n    }\r\n}\r\n\r\nexport default fetchDataNy\r\n"]},"metadata":{},"sourceType":"module"}