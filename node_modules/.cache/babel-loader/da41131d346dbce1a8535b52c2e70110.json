{"ast":null,"code":"var isArray = require('./array-helper').isArray;\n\nmodule.exports = {\n  copyOptions: function copyOptions(options) {\n    var key,\n        copy = {};\n\n    for (key in options) {\n      if (options.hasOwnProperty(key)) {\n        copy[key] = options[key];\n      }\n    }\n\n    return copy;\n  },\n  ensureFlagExists: function ensureFlagExists(item, options) {\n    if (!(item in options) || typeof options[item] !== 'boolean') {\n      options[item] = false;\n    }\n  },\n  ensureSpacesExists: function ensureSpacesExists(options) {\n    if (!('spaces' in options) || typeof options.spaces !== 'number' && typeof options.spaces !== 'string') {\n      options.spaces = 0;\n    }\n  },\n  ensureAlwaysArrayExists: function ensureAlwaysArrayExists(options) {\n    if (!('alwaysArray' in options) || typeof options.alwaysArray !== 'boolean' && !isArray(options.alwaysArray)) {\n      options.alwaysArray = false;\n    }\n  },\n  ensureKeyExists: function ensureKeyExists(key, options) {\n    if (!(key + 'Key' in options) || typeof options[key + 'Key'] !== 'string') {\n      options[key + 'Key'] = options.compact ? '_' + key : key;\n    }\n  },\n  checkFnExists: function checkFnExists(key, options) {\n    return key + 'Fn' in options;\n  }\n};","map":{"version":3,"sources":["C:/Eclipse/React/book-suggestion/node_modules/xml-js/lib/options-helper.js"],"names":["isArray","require","module","exports","copyOptions","options","key","copy","hasOwnProperty","ensureFlagExists","item","ensureSpacesExists","spaces","ensureAlwaysArrayExists","alwaysArray","ensureKeyExists","compact","checkFnExists"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAP,CAA0BD,OAAxC;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AAEfC,EAAAA,WAAW,EAAE,qBAAUC,OAAV,EAAmB;AAC9B,QAAIC,GAAJ;AAAA,QAASC,IAAI,GAAG,EAAhB;;AACA,SAAKD,GAAL,IAAYD,OAAZ,EAAqB;AACnB,UAAIA,OAAO,CAACG,cAAR,CAAuBF,GAAvB,CAAJ,EAAiC;AAC/BC,QAAAA,IAAI,CAACD,GAAD,CAAJ,GAAYD,OAAO,CAACC,GAAD,CAAnB;AACD;AACF;;AACD,WAAOC,IAAP;AACD,GAVc;AAYfE,EAAAA,gBAAgB,EAAE,0BAAUC,IAAV,EAAgBL,OAAhB,EAAyB;AACzC,QAAI,EAAEK,IAAI,IAAIL,OAAV,KAAsB,OAAOA,OAAO,CAACK,IAAD,CAAd,KAAyB,SAAnD,EAA8D;AAC5DL,MAAAA,OAAO,CAACK,IAAD,CAAP,GAAgB,KAAhB;AACD;AACF,GAhBc;AAkBfC,EAAAA,kBAAkB,EAAE,4BAAUN,OAAV,EAAmB;AACrC,QAAI,EAAE,YAAYA,OAAd,KAA2B,OAAOA,OAAO,CAACO,MAAf,KAA0B,QAA1B,IAAsC,OAAOP,OAAO,CAACO,MAAf,KAA0B,QAA/F,EAA0G;AACxGP,MAAAA,OAAO,CAACO,MAAR,GAAiB,CAAjB;AACD;AACF,GAtBc;AAwBfC,EAAAA,uBAAuB,EAAE,iCAAUR,OAAV,EAAmB;AAC1C,QAAI,EAAE,iBAAiBA,OAAnB,KAAgC,OAAOA,OAAO,CAACS,WAAf,KAA+B,SAA/B,IAA4C,CAACd,OAAO,CAACK,OAAO,CAACS,WAAT,CAAxF,EAAgH;AAC9GT,MAAAA,OAAO,CAACS,WAAR,GAAsB,KAAtB;AACD;AACF,GA5Bc;AA8BfC,EAAAA,eAAe,EAAE,yBAAUT,GAAV,EAAeD,OAAf,EAAwB;AACvC,QAAI,EAAEC,GAAG,GAAG,KAAN,IAAeD,OAAjB,KAA6B,OAAOA,OAAO,CAACC,GAAG,GAAG,KAAP,CAAd,KAAgC,QAAjE,EAA2E;AACzED,MAAAA,OAAO,CAACC,GAAG,GAAG,KAAP,CAAP,GAAuBD,OAAO,CAACW,OAAR,GAAkB,MAAMV,GAAxB,GAA8BA,GAArD;AACD;AACF,GAlCc;AAoCfW,EAAAA,aAAa,EAAE,uBAAUX,GAAV,EAAeD,OAAf,EAAwB;AACrC,WAAOC,GAAG,GAAG,IAAN,IAAcD,OAArB;AACD;AAtCc,CAAjB","sourcesContent":["var isArray = require('./array-helper').isArray;\r\n\r\nmodule.exports = {\r\n\r\n  copyOptions: function (options) {\r\n    var key, copy = {};\r\n    for (key in options) {\r\n      if (options.hasOwnProperty(key)) {\r\n        copy[key] = options[key];\r\n      }\r\n    }\r\n    return copy;\r\n  },\r\n\r\n  ensureFlagExists: function (item, options) {\r\n    if (!(item in options) || typeof options[item] !== 'boolean') {\r\n      options[item] = false;\r\n    }\r\n  },\r\n\r\n  ensureSpacesExists: function (options) {\r\n    if (!('spaces' in options) || (typeof options.spaces !== 'number' && typeof options.spaces !== 'string')) {\r\n      options.spaces = 0;\r\n    }\r\n  },\r\n\r\n  ensureAlwaysArrayExists: function (options) {\r\n    if (!('alwaysArray' in options) || (typeof options.alwaysArray !== 'boolean' && !isArray(options.alwaysArray))) {\r\n      options.alwaysArray = false;\r\n    }\r\n  },\r\n\r\n  ensureKeyExists: function (key, options) {\r\n    if (!(key + 'Key' in options) || typeof options[key + 'Key'] !== 'string') {\r\n      options[key + 'Key'] = options.compact ? '_' + key : key;\r\n    }\r\n  },\r\n\r\n  checkFnExists: function (key, options) {\r\n    return key + 'Fn' in options;\r\n  }\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"script"}