{"ast":null,"code":"import axios from 'axios';\nimport { getTodayDataFormatted } from \"../util/datesUtil\";\nconst endPoint = 'https://api.nytimes.com/svc/books/v3';\n\nconst fiction = date => `/lists/${date}/Hardcover fiction.json`;\n\nconst nonFiction = date => `/lists/${date}/Hardcover nonfiction.json`;\n\nconst key = '?api-key=yIY9ATTla1XKYKfDb1cb9pMz4kXKMiJK'; //available publications: https://api.nytimes.com/svc/books/v3/lists/names.json?api-key=yIY9ATTla1XKYKfDb1cb9pMz4kXKMiJK\n\n/**\r\n *\r\n * @param date of the publication, should be in the format yyyy-mm-dd (getTodayDataFormatted() or getRandomDate() can be used to get it)\r\n * @param category 0 for fiction, 1 for non fiction\r\n * @returns {Promise<[books]>}\r\n */\n\nexport const fetchDataNyYear = async (date, category) => {\n  if (date === undefined) {\n    date = getTodayDataFormatted();\n  }\n\n  console.log(`4 - category fetchdatanyyear`);\n  console.log(category);\n  console.log(category == 0 ? true : false);\n  const url = category == 0 ? endPoint + fiction(date) + key : endPoint + nonFiction(date) + key; //url = endPoint + fiction(date) + key;\n\n  console.log(\"-url: \" + url + \" category: \" + category);\n\n  try {\n    const {\n      data: {\n        results: {\n          books\n        }\n      }\n    } = await axios.get(url);\n    return books.map(i => {\n      // console.log(`fetchdatanyyear`)\n      // console.log(i)\n      return {\n        primary_isbn10: i.primary_isbn10,\n        publisher: i.publisher,\n        description: i.description,\n        title: i.title,\n        author: i.author,\n        book_image: i.book_image\n      };\n    });\n  } catch (error) {\n    console.log(`error fetchDataNy: ${error}`);\n    return error;\n  }\n};\n/**\r\n *\r\n * @param date of the publication, should be in the format yyyy-mm-dd (getTodayDataFormatted() or getRandomDate() can be used to get it)\r\n * @param category 0 for fiction, 1 for non fiction\r\n * @returns {Promise<books>} single book\r\n */\n\nexport const fetchDataNySingle = async (date, category) => {\n  //this.state.books[Math.floor(Math.random() * this.state.books.length)].title\n  const result = await fetchDataNyYear(date, category);\n  return result[Math.floor(Math.random() * result.length)];\n};","map":{"version":3,"sources":["c:/eclipse/react/book-suggestion/src/api/fetchDataNy.js"],"names":["axios","getTodayDataFormatted","endPoint","fiction","date","nonFiction","key","fetchDataNyYear","category","undefined","console","log","url","data","results","books","get","map","i","primary_isbn10","publisher","description","title","author","book_image","error","fetchDataNySingle","result","Math","floor","random","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,qBAAR,QAAoC,mBAApC;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AACA,MAAMC,OAAO,GAAIC,IAAD,IAAW,UAASA,IAAK,yBAAzC;;AACA,MAAMC,UAAU,GAAID,IAAD,IAAW,UAASA,IAAK,4BAA5C;;AACA,MAAME,GAAG,GAAG,2CAAZ,C,CACA;;AAEA;;;;;;;AAMA,OAAO,MAAMC,eAAe,GAAG,OAAOH,IAAP,EAAaI,QAAb,KAA0B;AACrD,MAAIJ,IAAI,KAAKK,SAAb,EAAwB;AACpBL,IAAAA,IAAI,GAAGH,qBAAqB,EAA5B;AACH;;AACDS,EAAAA,OAAO,CAACC,GAAR,CAAa,8BAAb;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,IAAI,CAAZ,GAAgB,IAAhB,GAAuB,KAAnC;AACA,QAAMI,GAAG,GAAGJ,QAAQ,IAAI,CAAZ,GAAgBN,QAAQ,GAAGC,OAAO,CAACC,IAAD,CAAlB,GAA2BE,GAA3C,GAAiDJ,QAAQ,GAAGG,UAAU,CAACD,IAAD,CAArB,GAA8BE,GAA3F,CAPqD,CAQrD;;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAWC,GAAX,GAAiB,aAAjB,GAAiCJ,QAA7C;;AAEA,MAAI;AACA,UAAM;AAACK,MAAAA,IAAI,EAAE;AAACC,QAAAA,OAAO,EAAE;AAACC,UAAAA;AAAD;AAAV;AAAP,QAA6B,MAAMf,KAAK,CAACgB,GAAN,CAAUJ,GAAV,CAAzC;AACA,WAAOG,KAAK,CAACE,GAAN,CAAWC,CAAD,IAAO;AACpB;AACA;AACA,aAAO;AAEHC,QAAAA,cAAc,EAAED,CAAC,CAACC,cAFf;AAGHC,QAAAA,SAAS,EAAEF,CAAC,CAACE,SAHV;AAIHC,QAAAA,WAAW,EAAEH,CAAC,CAACG,WAJZ;AAKHC,QAAAA,KAAK,EAAEJ,CAAC,CAACI,KALN;AAMHC,QAAAA,MAAM,EAAEL,CAAC,CAACK,MANP;AAOHC,QAAAA,UAAU,EAAEN,CAAC,CAACM;AAPX,OAAP;AASH,KAZM,CAAP;AAaH,GAfD,CAeE,OAAOC,KAAP,EAAc;AACZf,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBc,KAAM,EAAxC;AAEA,WAAOA,KAAP;AACH;AACJ,CA/BM;AAiCP;;;;;;;AAMA,OAAO,MAAMC,iBAAiB,GAAG,OAAOtB,IAAP,EAAaI,QAAb,KAA0B;AACvD;AACA,QAAMmB,MAAM,GAAG,MAAMpB,eAAe,CAACH,IAAD,EAAOI,QAAP,CAApC;AAEA,SAAOmB,MAAM,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,MAAM,CAACI,MAAlC,CAAD,CAAb;AACH,CALM","sourcesContent":["import axios from 'axios';\r\nimport {getTodayDataFormatted} from \"../util/datesUtil\";\r\n\r\nconst endPoint = 'https://api.nytimes.com/svc/books/v3';\r\nconst fiction = (date) => `/lists/${date}/Hardcover fiction.json`\r\nconst nonFiction = (date) => `/lists/${date}/Hardcover nonfiction.json`\r\nconst key = '?api-key=yIY9ATTla1XKYKfDb1cb9pMz4kXKMiJK'\r\n//available publications: https://api.nytimes.com/svc/books/v3/lists/names.json?api-key=yIY9ATTla1XKYKfDb1cb9pMz4kXKMiJK\r\n\r\n/**\r\n *\r\n * @param date of the publication, should be in the format yyyy-mm-dd (getTodayDataFormatted() or getRandomDate() can be used to get it)\r\n * @param category 0 for fiction, 1 for non fiction\r\n * @returns {Promise<[books]>}\r\n */\r\nexport const fetchDataNyYear = async (date, category) => {\r\n    if (date === undefined) {\r\n        date = getTodayDataFormatted();\r\n    }\r\n    console.log(`4 - category fetchdatanyyear`)\r\n    console.log(category)\r\n    console.log(category == 0 ? true : false)\r\n    const url = category == 0 ? endPoint + fiction(date) + key : endPoint + nonFiction(date) + key\r\n    //url = endPoint + fiction(date) + key;\r\n    console.log(\"-url: \" + url + \" category: \" + category)\r\n\r\n    try {\r\n        const {data: {results: {books}}} = await axios.get(url);\r\n        return books.map((i) => {\r\n            // console.log(`fetchdatanyyear`)\r\n            // console.log(i)\r\n            return {\r\n\r\n                primary_isbn10: i.primary_isbn10,\r\n                publisher: i.publisher,\r\n                description: i.description,\r\n                title: i.title,\r\n                author: i.author,\r\n                book_image: i.book_image\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.log(`error fetchDataNy: ${error}`)\r\n\r\n        return error;\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param date of the publication, should be in the format yyyy-mm-dd (getTodayDataFormatted() or getRandomDate() can be used to get it)\r\n * @param category 0 for fiction, 1 for non fiction\r\n * @returns {Promise<books>} single book\r\n */\r\nexport const fetchDataNySingle = async (date, category) => {\r\n    //this.state.books[Math.floor(Math.random() * this.state.books.length)].title\r\n    const result = await fetchDataNyYear(date, category)\r\n\r\n    return result[Math.floor(Math.random() * result.length)]\r\n};\r\n"]},"metadata":{},"sourceType":"module"}